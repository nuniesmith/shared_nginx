# config/nginx/nginx.conf
# Main context
user nginx;
worker_processes auto;
worker_rlimit_nofile 65535;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Events block
events {
    worker_connections 4096;
    multi_accept on;
    use epoll;
}

# HTTP block
http {
    # MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # DNS resolver for upstreams defined via variables (freddy/sullivan hostnames)
    resolver 1.1.1.1 1.0.0.1 8.8.8.8 8.8.4.4 valid=300s ipv6=off;
    resolver_timeout 5s;

    # ============================================================================
    # PROXY HEADERS HASH FIX
    # ============================================================================
    proxy_headers_hash_max_size 1024;
    proxy_headers_hash_bucket_size 128;

    # ============================================================================
    # INCLUDE MAPS - YOUR COMPREHENSIVE MAPS
    # Move maps to includes to avoid double-loading via conf.d/*.conf
    # ============================================================================
    include /etc/nginx/includes/maps.inc;

    # ============================================================================
    # LOGGING CONFIGURATION
    # ============================================================================

    # Enhanced logging format (using your $client_type from maps.conf)
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for" '
                   'rt=$request_time uct="$upstream_connect_time" '
                   'uht="$upstream_header_time" urt="$upstream_response_time" '
                   'client_type="$client_type"';

    # Health proxy logging format
    log_format health_proxy '$remote_addr - [$time_local] "$request" '
                           '$status rt=$request_time target="$arg_url" '
                           'method="$request_method" ref="$http_referer"';

    # JSON logging format for structured logs
    log_format json escape=json '{'
        '"time":"$time_iso8601",'
        '"remote_addr":"$remote_addr",'
        '"request":"$request",'
        '"status":$status,'
        '"bytes_sent":$bytes_sent,'
        '"request_time":$request_time,'
        '"http_referrer":"$http_referer",'
        '"http_user_agent":"$http_user_agent",'
        '"client_type":"$client_type"'
    '}';

    # Use conditional logging based on your $should_log map
    access_log /var/log/nginx/access.log main if=$should_log;
    error_log /var/log/nginx/error.log warn;

    # ============================================================================
    # PERFORMANCE SETTINGS
    # ============================================================================

    # Basic Performance Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 75s;
    keepalive_requests 1000;
    types_hash_max_size 2048;
    server_tokens off;
    reset_timedout_connection on;

    # Client settings
    client_body_timeout 60s;
    client_header_timeout 60s;
    send_timeout 60s;

    # Buffer settings
    client_body_buffer_size 128k;
    client_header_buffer_size 4k;
    client_max_body_size 1G;
    large_client_header_buffers 8 16k;

    # Proxy buffer settings
    proxy_buffering on;
    proxy_buffer_size 8k;
    proxy_buffers 16 8k;
    proxy_busy_buffers_size 16k;
    proxy_temp_file_write_size 16k;
    proxy_max_temp_file_size 1024m;

    # Proxy timeout settings
    proxy_connect_timeout 10s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;
    proxy_next_upstream error timeout http_502 http_503 http_504;

    # Enhanced proxy settings
    proxy_intercept_errors on;
    proxy_ignore_client_abort off;
    proxy_pass_header Server;

    # ============================================================================
    # COMPRESSION SETTINGS
    # ============================================================================

    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 32 8k;
    gzip_http_version 1.1;
    gzip_min_length 1024;
    gzip_types
        application/atom+xml
        application/geo+json
        application/javascript
        application/x-javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rdf+xml
        application/rss+xml
        application/xhtml+xml
        application/xml
        application/xml+rss
        font/eot
        font/otf
        font/ttf
        image/svg+xml
        text/css
        text/javascript
        text/plain
        text/xml;

    # Brotli compression (if module available)
    # brotli on;
    # brotli_comp_level 6;
    # brotli_types text/plain text/css text/xml text/javascript 
    #              application/json application/javascript application/xml+rss 
    #              application/atom+xml image/svg+xml;

    # ============================================================================
    # CACHING SETTINGS
    # ============================================================================

    # File caching
    open_file_cache max=10000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # Cache zones
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=static_cache:10m max_size=1g inactive=60m use_temp_path=off;

    # Use cache control headers from your maps.conf
    add_header Cache-Control $cache_control_header always;

    # ============================================================================
    # RATE LIMITING ZONES (Compatible with your maps.conf)
    # ============================================================================

    # Basic rate limiting zones
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=api:10m rate=30r/s;
    limit_req_zone $binary_remote_addr zone=media:10m rate=20r/s;
    limit_req_zone $binary_remote_addr zone=admin:10m rate=15r/s;
    limit_req_zone $binary_remote_addr zone=general:10m rate=15r/s;
    limit_req_zone $binary_remote_addr zone=health:10m rate=60r/s;
    limit_req_zone $binary_remote_addr zone=dashboard:10m rate=50r/s;
    limit_req_zone $binary_remote_addr zone=static:10m rate=50r/s;

    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    limit_conn_zone $binary_remote_addr zone=addr:10m;
    limit_conn conn_limit_per_ip 20;

    # ============================================================================
    # REAL IP CONFIGURATION
    # ============================================================================

    real_ip_header X-Forwarded-For;
    real_ip_recursive on;
    set_real_ip_from 172.16.0.0/12;
    set_real_ip_from 10.0.0.0/8;
    set_real_ip_from 192.168.0.0/16;
    set_real_ip_from 127.0.0.1/32;

    # ============================================================================
    # SECURITY HEADERS FROM MAPS.CONF
    # ============================================================================

    # Use dynamic security headers from your maps.conf
    add_header X-Frame-Options $x_frame_options always;
    add_header X-Content-Type-Options $x_content_type_options always;
    add_header X-XSS-Protection $x_xss_protection always;
    add_header Referrer-Policy $referrer_policy always;
    add_header Content-Security-Policy $content_security_policy always;
    # Removed HSTS header for HTTP-only mode
    # add_header Strict-Transport-Security $hsts_duration always;

    # ============================================================================
    # SSL CONFIGURATION (moved to conf.d/ssl.conf)
    # ============================================================================
    # SSL settings are configured in server blocks via ssl.conf include

    # ============================================================================
    # UPSTREAM DEFINITIONS
    # ============================================================================
    # NOTE:
    # Avoid defining upstreams with DNS names that may not resolve at container boot.
    # This caused nginx to fail to start (host not found in upstream ...).
    # Service routing is handled in conf.d via proxy_pass with variables and a resolver.
    # If you need static upstreams, add them in a separate included file enabled only in cloud envs.

    # ============================================================================
    # DEFAULT SERVERS (HTTP ONLY)
    # ============================================================================

    # Default server block - HTTP only (DISABLED for local testing)
    # server {
    #     listen 80 default_server;
    #     server_name _;
    #     
    #     return 444;
    # }

    # Health check and monitoring server
    server {
        listen 8080;
        server_name localhost;
        
        access_log off;
        error_log /dev/null;
        
        location = /health {
            return 200 '{"status":"healthy","timestamp":"$time_iso8601","version":"2.0"}\n';
            add_header Content-Type application/json;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
        }
        
        location = /nginx-status {
            stub_status on;
            allow 127.0.0.1;
            allow 172.16.0.0/12;
            allow 10.0.0.0/8;
            allow 192.168.0.0/16;
            allow 172.20.0.0/16;  # Docker network
            deny all;
        }
        
        location / {
            return 404;
        }
    }

    # ============================================================================
    # HEALTH PROXY SERVER FOR DASHBOARD (HTTP ONLY)
    # ============================================================================
    
    server {
        listen 8081;
        server_name localhost;
        
        access_log /var/log/nginx/health_proxy.log health_proxy;
        error_log /var/log/nginx/health_proxy_error.log warn;
        
        limit_req zone=health burst=20 nodelay;
        
        location /api/health-proxy {
            # Security: Only allow from local networks
            allow 127.0.0.0/8;
            allow 172.16.0.0/12;
            allow 10.0.0.0/8;
            allow 192.168.0.0/16;
            deny all;

            # CORS headers (updated for HTTP)
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, HEAD, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, HEAD, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization';
                add_header 'Access-Control-Max-Age' 86400;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            if ($request_method != GET) {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Content-Type' 'application/json' always;
                return 405 '{"accessible": false, "status": "405", "message": "Method not allowed"}';
            }

            set $target_url $arg_url;
            
            if ($target_url = '') {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Content-Type' 'application/json' always;
                return 400 '{"accessible": false, "status": "400", "message": "Missing URL parameter"}';
            }

            if ($target_url !~ "^https?://[a-zA-Z0-9.-]*\.?7gram\.xyz") {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Content-Type' 'application/json' always;
                return 403 '{"accessible": false, "status": "403", "message": "Domain not allowed"}';
            }

            if ($arg_test = 'true') {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Content-Type' 'application/json' always;
                return 200 '{"accessible": true, "status": "200", "message": "Health proxy is available", "timestamp": "$time_iso8601"}';
            }

            proxy_pass $target_url;
            proxy_method HEAD;
            proxy_set_header User-Agent "7gram-health-checker/2.0";
            proxy_set_header Host $proxy_host;
            
            proxy_connect_timeout 3s;
            proxy_send_timeout 3s;
            proxy_read_timeout 3s;
            
            proxy_redirect off;
            proxy_buffering off;
            proxy_request_buffering off;
            proxy_intercept_errors on;
            
            error_page 300 301 302 303 304 307 308 = @health_redirect;
            error_page 400 401 403 404 405 406 = @health_client_error;
            error_page 500 502 503 504 505 = @health_server_error;
            error_page 408 444 = @health_timeout;
        }

        location @health_redirect {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Content-Type' 'application/json' always;
            return 200 '{"accessible": true, "status": "$upstream_status", "message": "Service accessible (redirect)", "timestamp": "$time_iso8601"}';
        }

        location @health_client_error {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Content-Type' 'application/json' always;
            return 200 '{"accessible": true, "status": "$upstream_status", "message": "Service accessible (client error)", "timestamp": "$time_iso8601"}';
        }

        location @health_server_error {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Content-Type' 'application/json' always;
            return 200 '{"accessible": false, "status": "$upstream_status", "message": "Service has server error", "timestamp": "$time_iso8601"}';
        }

        location @health_timeout {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Content-Type' 'application/json' always;
            return 200 '{"accessible": false, "status": "timeout", "message": "Service timeout or unreachable", "timestamp": "$time_iso8601"}';
        }

        location = /status {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Content-Type' 'application/json' always;
            return 200 '{"status": "healthy", "service": "health-proxy", "version": "2.0", "timestamp": "$time_iso8601"}';
        }

        location / {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Content-Type' 'application/json' always;
            return 404 '{"accessible": false, "status": "404", "message": "Health proxy endpoint not found", "timestamp": "$time_iso8601"}';
        }
    }

    # ============================================================================
    # INCLUDE SERVER CONFIGURATIONS
    # ============================================================================

    include /etc/nginx/conf.d/*.conf;
}