# config/nginx/snippets/cors.conf
# nginx CORS Configuration for 7gram Dashboard Health Checks
# Add this to your nginx server blocks for each service

map $request_method $cors_method {
    OPTIONS 11;
    GET     1;
    POST    1;
    PUT     1;
    DELETE  1;
    default 0;
}

# CORS configuration snippet
location / {
    # Handle preflight requests
    if ($cors_method ~ '11') {
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, HEAD' always;
        add_header 'Access-Control-Allow-Headers' 'Accept,Accept-Language,Content-Language,Content-Type,Authorization,X-Requested-With,User-Agent' always;
        add_header 'Access-Control-Max-Age' 3600 always;
        add_header 'Content-Type' 'text/plain; charset=utf-8' always;
        add_header 'Content-Length' 0 always;
        return 204;
    }

    # Handle actual requests
    if ($cors_method ~ '1') {
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, HEAD' always;
        add_header 'Access-Control-Allow-Headers' 'Accept,Accept-Language,Content-Language,Content-Type,Authorization,X-Requested-With,User-Agent' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
    }

    # Your existing proxy_pass or other directives
    proxy_pass http://your_backend;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
}

location /health {
    # Enable CORS for health checks
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Methods' 'GET, HEAD, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'Accept,Accept-Language,Content-Language,Content-Type,User-Agent' always;
    add_header 'Access-Control-Max-Age' 3600 always;

    # Handle preflight requests
    if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, HEAD, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Accept,Accept-Language,Content-Language,Content-Type,User-Agent' always;
        add_header 'Access-Control-Max-Age' 3600 always;
        add_header 'Content-Type' 'text/plain; charset=utf-8' always;
        add_header 'Content-Length' 0 always;
        return 204;
    }

    # Health check endpoint - return simple JSON
    if ($request_method = 'GET') {
        add_header 'Content-Type' 'application/json' always;
        return 200 '{"status":"healthy","service":"$server_name","timestamp":"$time_iso8601"}';
    }
    
    # HEAD requests for basic connectivity
    if ($request_method = 'HEAD') {
        return 200;
    }
}

# Example server block for a specific service (e.g., Jellyfin)
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name jellyfin.7gram.xyz;

    # SSL configuration (your existing SSL setup)
    ssl_certificate /path/to/cert.pem;
    ssl_certificate_key /path/to/key.pem;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Health check endpoint with CORS
    location /health {
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, HEAD, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Accept,User-Agent' always;
        add_header 'Access-Control-Max-Age' 3600 always;

        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, HEAD, OPTIONS' always;
            add_header 'Access-Control-Max-Age' 3600 always;
            add_header 'Content-Length' 0 always;
            return 204;
        }

        add_header 'Content-Type' 'application/json' always;
        return 200 '{"status":"healthy","service":"jellyfin","timestamp":"$time_iso8601","uptime":"$upstream_response_time"}';
    }

    # Main application with CORS headers for dashboard requests
    location / {
        # CORS headers for dashboard communication
        add_header 'Access-Control-Allow-Origin' 'https://7gram.xyz' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, HEAD' always;
        add_header 'Access-Control-Allow-Headers' 'Accept,Accept-Language,Content-Language,Content-Type,Authorization,X-Requested-With' always;

        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' 'https://7gram.xyz' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, HEAD' always;
            add_header 'Access-Control-Max-Age' 3600 always;
            add_header 'Content-Length' 0 always;
            return 204;
        }

        # Proxy to Jellyfin
        proxy_pass http://127.0.0.1:8096;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;

        # WebSocket support for Jellyfin
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Buffering
        proxy_buffering off;
        proxy_request_buffering off;
    }
}

# Template for other services - copy and modify for each subdomain
# Replace:
# - server_name with your actual subdomain
# - proxy_pass with your service's internal address
# - service name in health check response

# For services that don't have built-in health endpoints,
# you can create a simple health check that tests the main service:
location /health {
    access_log off;
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Methods' 'GET, HEAD, OPTIONS' always;
    add_header 'Content-Type' 'application/json' always;

    if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Max-Age' 3600 always;
        add_header 'Content-Length' 0 always;
        return 204;
    }

    # Test if upstream is responding
    proxy_pass http://your_service_backend/;
    proxy_method HEAD;
    proxy_pass_request_body off;
    proxy_set_header Content-Length "";
    proxy_set_header X-Original-URI $request_uri;
    
    # If upstream responds, return health status
    error_page 200 = @health_ok;
    error_page 400 401 403 404 500 502 503 504 = @health_error;
}

location @health_ok {
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Content-Type' 'application/json' always;
    return 200 '{"status":"healthy","service":"$server_name","timestamp":"$time_iso8601"}';
}

location @health_error {
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Content-Type' 'application/json' always;
    return 503 '{"status":"error","service":"$server_name","timestamp":"$time_iso8601","error":"service_unavailable"}';
}