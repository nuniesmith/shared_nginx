# FKS Nginx Configuration Template
# Standard nginx configuration for FKS microservices reverse proxy

# Main nginx configuration with FKS standards
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Load dynamic modules
load_module modules/ngx_http_headers_more_filter_module.so;

events {
    worker_connections ${FKS_WORKER_CONNECTIONS:-1024};
    use epoll;
    multi_accept on;
}

http {
    # Basic settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging format with FKS standards
    log_format fks_format '$remote_addr - $remote_user [$time_local] "$request" '
                         '$status $body_bytes_sent "$http_referer" '
                         '"$http_user_agent" "$http_x_forwarded_for" '
                         'rt=$request_time uct="$upstream_connect_time" '
                         'uht="$upstream_header_time" urt="$upstream_response_time" '
                         'service="$upstream_addr" fks_env="${FKS_ENVIRONMENT}"';
    
    access_log /var/log/nginx/access.log fks_format;
    
    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;
    
    # Buffer settings
    client_body_buffer_size 128k;
    client_max_body_size ${FKS_MAX_BODY_SIZE:-10m};
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    output_buffers 1 32k;
    postpone_output 1460;
    
    # Timeout settings
    client_header_timeout 30s;
    client_body_timeout 30s;
    send_timeout 30s;
    
    # Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private must-revalidate auth;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json
        image/svg+xml;
    
    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=${FKS_API_RATE_LIMIT:-10r/s};
    limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=${FKS_AUTH_RATE_LIMIT:-5r/s};
    limit_req_zone $binary_remote_addr zone=general_limit:10m rate=${FKS_GENERAL_RATE_LIMIT:-20r/s};
    
    # Connection limiting  
    limit_conn_zone $binary_remote_addr zone=conn_limit:10m;
    
    # SSL settings (if SSL is enabled)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Security headers (default)
    more_set_headers "X-Content-Type-Options: nosniff";
    more_set_headers "X-Frame-Options: DENY";
    more_set_headers "X-XSS-Protection: 1; mode=block";
    more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
    more_set_headers "X-FKS-Environment: ${FKS_ENVIRONMENT}";
    
    # Upstream health check settings
    upstream_conf upstream_zone=global:64k;
    
    # FKS Service Upstreams
    upstream fks-api {
        zone fks-api 64k;
        server ${FKS_API_HOST:-fks-api}:${FKS_API_PORT:-8001} max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    upstream fks-auth {
        zone fks-auth 64k;
        server ${FKS_AUTH_HOST:-fks-auth}:${FKS_AUTH_PORT:-8002} max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    upstream fks-data {
        zone fks-data 64k;
        server ${FKS_DATA_HOST:-fks-data}:${FKS_DATA_PORT:-8003} max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    upstream fks-engine {
        zone fks-engine 64k;
        server ${FKS_ENGINE_HOST:-fks-engine}:${FKS_ENGINE_PORT:-8004} max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    upstream fks-training {
        zone fks-training 64k;
        server ${FKS_TRAINING_HOST:-fks-training}:${FKS_TRAINING_PORT:-8005} max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    upstream fks-transformer {
        zone fks-transformer 64k;
        server ${FKS_TRANSFORMER_HOST:-fks-transformer}:${FKS_TRANSFORMER_PORT:-8006} max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    upstream fks-worker {
        zone fks-worker 64k;
        server ${FKS_WORKER_HOST:-fks-worker}:${FKS_WORKER_PORT:-8007} max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    upstream fks-web {
        zone fks-web 64k;
        server ${FKS_WEB_HOST:-fks-web}:${FKS_WEB_PORT:-3000} max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    upstream fks-ninja {
        zone fks-ninja 64k;
        server ${FKS_NINJA_HOST:-fks-ninja}:${FKS_NINJA_PORT:-8080} max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    # FKS Rust services
    upstream fks-execution {
        zone fks-execution 64k;
        server ${FKS_EXECUTION_HOST:-fks-execution}:${FKS_EXECUTION_PORT:-8080} max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    upstream fks-nodes {
        zone fks-nodes 64k;
        server ${FKS_NODES_HOST:-fks-nodes}:${FKS_NODES_PORT:-8080} max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    upstream fks-config {
        zone fks-config 64k;
        server ${FKS_CONFIG_HOST:-fks-config}:${FKS_CONFIG_PORT:-8080} max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    # Health check endpoint for nginx itself
    server {
        listen ${FKS_NGINX_HEALTH_PORT:-8090};
        server_name localhost;
        
        location /health {
            access_log off;
            return 200 '{"status":"healthy","service":"fks-nginx","upstreams":{"count":11},"environment":"${FKS_ENVIRONMENT}"}';
            add_header Content-Type application/json;
        }
        
        location /metrics {
            access_log off;
            stub_status on;
        }
        
        location /upstream_status {
            access_log off;
            upstream_conf;
        }
    }
    
    # Main server configuration
    server {
        listen ${FKS_SERVICE_PORT:-80};
        server_name ${FKS_SERVER_NAME:-localhost} ${FKS_SERVER_ALIASES:-};
        
        # Security settings
        limit_conn conn_limit ${FKS_MAX_CONNECTIONS:-100};
        
        # FKS service headers
        more_set_headers "X-FKS-Service: fks-nginx";
        more_set_headers "X-FKS-Version: 1.0.0";
        
        # Root location - serve web app
        location / {
            limit_req zone=general_limit burst=50 nodelay;
            
            proxy_pass http://fks-web;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_cache_bypass $http_upgrade;
            
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }
        
        # API endpoints with rate limiting
        location /api/ {
            limit_req zone=api_limit burst=20 nodelay;
            
            proxy_pass http://fks-api/;
            include /etc/nginx/conf.d/proxy-headers.conf;
        }
        
        # Authentication endpoints
        location /auth/ {
            limit_req zone=auth_limit burst=10 nodelay;
            
            proxy_pass http://fks-auth/;
            include /etc/nginx/conf.d/proxy-headers.conf;
        }
        
        # Data service endpoints
        location /data/ {
            limit_req zone=api_limit burst=20 nodelay;
            
            proxy_pass http://fks-data/;
            include /etc/nginx/conf.d/proxy-headers.conf;
        }
        
        # Engine service endpoints
        location /engine/ {
            limit_req zone=api_limit burst=20 nodelay;
            
            proxy_pass http://fks-engine/;
            include /etc/nginx/conf.d/proxy-headers.conf;
        }
        
        # Training service endpoints
        location /training/ {
            limit_req zone=api_limit burst=10 nodelay;
            
            proxy_pass http://fks-training/;
            include /etc/nginx/conf.d/proxy-headers.conf;
        }
        
        # Transformer service endpoints
        location /transformer/ {
            limit_req zone=api_limit burst=10 nodelay;
            
            proxy_pass http://fks-transformer/;
            include /etc/nginx/conf.d/proxy-headers.conf;
        }
        
        # Worker service endpoints
        location /worker/ {
            limit_req zone=api_limit burst=5 nodelay;
            
            proxy_pass http://fks-worker/;
            include /etc/nginx/conf.d/proxy-headers.conf;
        }
        
        # Ninja trading service endpoints
        location /ninja/ {
            limit_req zone=api_limit burst=10 nodelay;
            
            proxy_pass http://fks-ninja/;
            include /etc/nginx/conf.d/proxy-headers.conf;
        }
        
        # Rust service endpoints
        location /execution/ {
            limit_req zone=api_limit burst=30 nodelay;
            
            proxy_pass http://fks-execution/;
            include /etc/nginx/conf.d/proxy-headers.conf;
        }
        
        location /nodes/ {
            limit_req zone=api_limit burst=20 nodelay;
            
            proxy_pass http://fks-nodes/;
            include /etc/nginx/conf.d/proxy-headers.conf;
        }
        
        location /config/ {
            limit_req zone=api_limit burst=10 nodelay;
            
            proxy_pass http://fks-config/;
            include /etc/nginx/conf.d/proxy-headers.conf;
        }
        
        # WebSocket support for real-time data
        location /ws/ {
            proxy_pass http://fks-engine/ws/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_read_timeout 86400;
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
        }
        
        # Health check aggregation endpoint
        location /health {
            access_log off;
            
            # Return aggregated health status
            proxy_pass http://fks-api/health;
            proxy_set_header Host $host;
            proxy_set_header X-Health-Check "aggregate";
        }
        
        # Metrics aggregation endpoint
        location /metrics {
            access_log off;
            
            proxy_pass http://fks-api/metrics;
            proxy_set_header Host $host;
            proxy_set_header X-Metrics-Request "aggregate";
        }
        
        # Static assets with caching
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Cache-Status "HIT";
            
            proxy_pass http://fks-web;
            proxy_set_header Host $host;
        }
        
        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /usr/share/nginx/html;
        }
        
        location = /404.html {
            root /usr/share/nginx/html;
        }
    }
    
    # Include additional configurations
    include /etc/nginx/conf.d/*.conf;
}
